values_from = "value")
MarkersTMENs.kerPos <-MarkersCellsTMENS%>%
filter(cell_type=="Keratin-positive tumor")%>%
pivot_wider(id_cols=c("site_id","patient_id","arch1","arch2","arch3","arch4"),
names_from = "marker",
values_from = "value")
# TernaryPlot(atip = expression(arch1),
#              btip = expression(arch2),
#              ctip = expression(arch3))
# TernaryPoints(MarkersTMENs.kerPos[,c("arch1","arch2","arch3")],pch=19)
library(ggplot2)
library(ggtern)
MarkersTMENs.kerPos<-MarkersTMENs.kerPos%>%dplyr::rename(TLS=arch1)%>%
dplyr::rename(inflamm = arch2)%>%dplyr::rename(fibrotic=arch4)%>%
dplyr::rename(cancer=arch3)
options(ggplot2.continuous.colour="viridis")
#pdf("./TernaryPlot_KerPos_HLA1.pdf",width=5,height=4)
# ggtern(data=MarkersTMENs.kerPos, aes(x = cancer,y = inflamm, z = fibrotic,color = HLA_Class_1)) +
#   geom_point() +
#   labs(title="Local environment in Keratin-positive cancer cells") +
#   theme_custom(
#   base_size = 9,
#   base_family = "",
#   tern.plot.background = NULL,
#   tern.panel.background = NULL,
#   col.T = "red",
#   col.L = "magenta",
#   col.R = "steelblue",
#   col.grid.minor = "white"
# )
#dev.off()
library(ggpubr)
MarkersCellsTMENS1 <- MarkersCellsTMENS%>%dplyr::rename(TLS=arch1)%>%
dplyr::rename(inflamm = arch2)%>%dplyr::rename(fibrotic=arch4)%>%
dplyr::rename(cancer=arch3)
####POSITIVE CONTROLS
## HLA CLASS I IN KERATIN-POSITIVE TUMORS
ggplot(data=MarkersTMENs.kerPos,aes(x=inflamm*cancer,y=HLA_Class_1))+
geom_point()+
#scale_x_continuous(trans="log")+
stat_cor(method="spearman",cor.coef.name="rho",label.x=0.2)+
ggtitle("HLA class I in Ker+ cells and inflamm-cancer interface")
## BETA CATENIN IN CD8 T CELLS
ggplot(data=MarkersCellsTMENS1%>%filter(cell_type=="CD8-T"& marker=="Beta.catenin"),aes(x=cancer*fibrotic,y=value))+
geom_point()+
#scale_x_continuous(trans="log")+
stat_cor(method="spearman",cor.coef.name="rho",label.x=0.18)+
ggtitle("Beta catenin in CD8T cellls & cancer-fibr interface")
#### NEGATIVE CONTROLS
## dsDNA in KERATIN POSITIVE TUMORS VS CANCER
ggplot(data=MarkersTMENs.kerPos,aes(x=cancer,y=dsDNA))+
geom_point()+
#scale_y_continuous(trans="log")+ #scale_x_continuous(trans="log")+
stat_cor(method="spearman",cor.coef.name="rho",label.x=0.70)+
ggtitle("dsDNA in Ker+ cells & cancer niche")
## dsDNA in KERATIN POSITIVE TUMORS VS INFLAMM Neutrophils;CD45RO in TLS
ggplot(data=MarkersCellsTMENS1%>%filter(cell_type=="Neutrophils"& marker=="CD45RO"),aes(x=TLS,y=value))+
geom_point()+
#scale_y_continuous(trans="log")+ #scale_x_continuous(trans="log")+
stat_cor(method="spearman",cor.coef.name="rho",label.x=0.70)+
ggtitle("CD45RO in Neutrophils & TLS")
### RANDOM CONTROLS (8 ct-markers VS TMENs)
TMENs <- c("TLS","inflamm","cancer","fibrotic")
set.seed(12)
rand.ct <- sample(CELLTYPES, 8)
rand.markers <- sample(MARKERS,8)
rand.tmens <- sample(TMENs,8,replace=TRUE)
MarkersCellsTMENS2 <- MarkersCellsTMENS1%>%pivot_longer(cols=c("cancer","TLS","inflamm","fibrotic"),names_to="tmen",values_to = "tmen_prop")
randCMs <- tibble(cell_type=rand.ct,marker=rand.markers,tmen=rand.tmens)
#merge(MarkersCellsTMENS2,randCMs, by=c("cell_type","marker","tmen"))
randsToPlot <- right_join(MarkersCellsTMENS2%>%dplyr::select(c(cell_type, marker, tmen, value, tmen_prop)),randCMs, by=c("cell_type","marker","tmen"))%>%mutate(ctMarker = paste0(cell_type,";",marker, " VS ",tmen))#%>%group_by(cell_type, marker,tmen)%>%summarise(count=n())
ggplot(data=randsToPlot,aes(x=tmen_prop,y=value))+
facet_wrap(~ctMarker,nrow=2,ncol=4)+
geom_point(alpha=.01)+
geom_density_2d()+
stat_cor(method="spearman",cor.coef.name="rho",label.x=0.30)
#MarkersCellsTMENS2%>%group_by(cell_type, marker, tmen)%>%filter(cell_type==randCMs$cell_type & marker ==randCMs$marker & tmen ==randCMs$tmen)
MarkersCellsTMENS.selected.cd4 <- MarkersCellsTMENS.selected%>%
filter(cell_type == "CD4-T")%>%
pivot_wider(id_cols = c("site_id","patient_id","arch1","arch2","arch3","arch4"),
names_from = "marker",
values_from = "value")
MarkersTMENs.kerPos <-MarkersCellsTMENS%>%
filter(cell_type=="Keratin-positive tumor")%>%
pivot_wider(id_cols=c("site_id","patient_id","arch1","arch2","arch3","arch4"),
names_from = "marker",
values_from = "value")
# TernaryPlot(atip = expression(arch1),
#              btip = expression(arch2),
#              ctip = expression(arch3))
# TernaryPoints(MarkersTMENs.kerPos[,c("arch1","arch2","arch3")],pch=19)
library(ggplot2)
library(ggtern)
MarkersTMENs.kerPos<-MarkersTMENs.kerPos%>%dplyr::rename(TLS=arch1)%>%
dplyr::rename(inflamm = arch2)%>%dplyr::rename(fibrotic=arch4)%>%
dplyr::rename(cancer=arch3)
options(ggplot2.continuous.colour="viridis")
#pdf("./TernaryPlot_KerPos_HLA1.pdf",width=5,height=4)
# ggtern(data=MarkersTMENs.kerPos, aes(x = cancer,y = inflamm, z = fibrotic,color = HLA_Class_1)) +
#   geom_point() +
#   labs(title="Local environment in Keratin-positive cancer cells") +
#   theme_custom(
#   base_size = 9,
#   base_family = "",
#   tern.plot.background = NULL,
#   tern.panel.background = NULL,
#   col.T = "red",
#   col.L = "magenta",
#   col.R = "steelblue",
#   col.grid.minor = "white"
# )
#dev.off()
library(ggpubr)
MarkersCellsTMENS1 <- MarkersCellsTMENS%>%dplyr::rename(TLS=arch1)%>%
dplyr::rename(inflamm = arch2)%>%dplyr::rename(fibrotic=arch4)%>%
dplyr::rename(cancer=arch3)
####POSITIVE CONTROLS
## HLA CLASS I IN KERATIN-POSITIVE TUMORS
ggplot(data=MarkersTMENs.kerPos,aes(x=inflamm*cancer,y=HLA_Class_1))+
geom_point(alpha=.01)+
geom_density_2d()+
#scale_x_continuous(trans="log")+
stat_cor(method="spearman",cor.coef.name="rho",label.x=0.2)+
ggtitle("HLA class I in Ker+ cells and inflamm-cancer interface")
## BETA CATENIN IN CD8 T CELLS
ggplot(data=MarkersCellsTMENS1%>%filter(cell_type=="CD8-T"& marker=="Beta.catenin"),aes(x=cancer*fibrotic,y=value))+
geom_point(alpha=.01)+
geom_density_2d()+
#scale_x_continuous(trans="log")+
stat_cor(method="spearman",cor.coef.name="rho",label.x=0.18)+
ggtitle("Beta catenin in CD8T cellls & cancer-fibr interface")
#### NEGATIVE CONTROLS
## dsDNA in KERATIN POSITIVE TUMORS VS CANCER
ggplot(data=MarkersTMENs.kerPos,aes(x=cancer,y=dsDNA))+
geom_point(alpha=.01)+
geom_density_2d()+
#scale_y_continuous(trans="log")+ #scale_x_continuous(trans="log")+
stat_cor(method="spearman",cor.coef.name="rho",label.x=0.70)+
ggtitle("dsDNA in Ker+ cells & cancer niche")
## dsDNA in KERATIN POSITIVE TUMORS VS INFLAMM Neutrophils;CD45RO in TLS
ggplot(data=MarkersCellsTMENS1%>%filter(cell_type=="Neutrophils"& marker=="CD45RO"),aes(x=TLS,y=value))+
geom_point(alpha=.01)+
geom_density_2d()+
#scale_y_continuous(trans="log")+ #scale_x_continuous(trans="log")+
stat_cor(method="spearman",cor.coef.name="rho",label.x=0.70)+
ggtitle("CD45RO in Neutrophils & TLS")
### RANDOM CONTROLS (8 ct-markers VS TMENs)
TMENs <- c("TLS","inflamm","cancer","fibrotic")
set.seed(12)
rand.ct <- sample(CELLTYPES, 8)
rand.markers <- sample(MARKERS,8)
rand.tmens <- sample(TMENs,8,replace=TRUE)
MarkersCellsTMENS2 <- MarkersCellsTMENS1%>%pivot_longer(cols=c("cancer","TLS","inflamm","fibrotic"),names_to="tmen",values_to = "tmen_prop")
randCMs <- tibble(cell_type=rand.ct,marker=rand.markers,tmen=rand.tmens)
#merge(MarkersCellsTMENS2,randCMs, by=c("cell_type","marker","tmen"))
randsToPlot <- right_join(MarkersCellsTMENS2%>%dplyr::select(c(cell_type, marker, tmen, value, tmen_prop)),randCMs, by=c("cell_type","marker","tmen"))%>%mutate(ctMarker = paste0(cell_type,";",marker, " VS ",tmen))#%>%group_by(cell_type, marker,tmen)%>%summarise(count=n())
ggplot(data=randsToPlot,aes(x=tmen_prop,y=value))+
facet_wrap(~ctMarker,nrow=2,ncol=4)+
geom_point(alpha=.01)+
geom_density_2d()+
stat_cor(method="spearman",cor.coef.name="rho",label.x=0.30)
#MarkersCellsTMENS2%>%group_by(cell_type, marker, tmen)%>%filter(cell_type==randCMs$cell_type & marker ==randCMs$marker & tmen ==randCMs$tmen)
gc()
knitr::opts_chunk$set(echo = TRUE)
gc()
rm(list=ls())
library(tidyverse)
library(plotly)
library(reticulate)
library(ade4)
library(reticulate)
library(htmltools)
library('Ternary')
dirName <- dirname(rstudioapi::getSourceEditorContext()$path )
setwd(dirName)#setwd(dir = "/scratch/anissa.el/ImmuneStates/phenot_tmens")
NBCELLTYPES = 17
CELLTYPES <- c('CD8-T', 'Other immune', 'DC / Mono', 'CD3-T', 'B', 'NK', 'Keratin-positive tumor', 'Tumor','CD4-T', 'Mesenchymal-like', 'Macrophages', 'Endothelial', 'Tregs', 'Unidentified', 'DC', 'Mono / Neu','Neutrophils')
MARKERS <- c("dsDNA","Vimentin","SMA","B7H3","FoxP3","Lag3","CD4","CD16","CD56","OX40","PD1","CD31","PD.L1","EGFR","Ki67","CD209","CD11c","CD138","CD163","CD68","CSF.1R","CD8","CD3","IDO","Keratin17","CD63","CD45RO","CD20","p53","Beta.catenin","HLA.DR","CD11b","CD45","H3K9ac","Pan.Keratin","H3K27me3","phospho.S6","MPO","Keratin6","HLA_Class_1")
archsToTMENs <- read.csv("../data_BB/archetypes_building_blocks_17cells_space_gaussian.csv")
# ARCH1: TLS
# ARCH2: INFLAMMATORY NICHE
# ARCH3: CANCER NICHE
# ARCH4: FIBROTIC/NECROTIC NICHE
cell_markers <- read.csv('/scratch/anissa.el/ImmuneStates/cellData.csv',header = TRUE, sep =',')
colnames(cell_markers)
cell_markers <- cell_markers %>% relocate(Background, .after = cellLabelInImage)
cell_markers <- dplyr::select(cell_markers,-(cellSize:Fe))
#SampleID,cellLabelInImage,cell_markers,Pan.Keratin,Keratin6,Keratin17,p53,Beta.catenin,EGFR,
#                        dsDNA,H3K9ac,H3K27me3,phospho.S6,Ki67,
#                        CD45,CD3,CD8,CD4,FoxP3,CD20,CD45RO,CD56,CD16,CD138,CD11b,CD11c,CD68,CD63,MPO,HLA.DR,HLA_Class_1,CD209,
#                        Lag3,PD1,PD.L1,IDO,
#                        Vimentin,SMA,CD31,
#                        B7H3,OX40,CD163,CSF.1R,tumorYN,tumorCluster,Group,immuneGroup
cell_markers <- dplyr::select(cell_markers,-c( immuneCluster, Ta, Au))%>%
mutate(immuneGroup = recode(immuneGroup,`0`= 'None',`1`='Tregs', `2`='CD4-T',
`3`='CD8-T', `4`='CD3-T', `5`='NK',
`6`='B', `7`='Neutrophils', `8`='Macrophages', `9`='DC',
`10`='DC / Mono', `11`='Mono / Neu', `12`='Other immune')) %>%
mutate(Group = recode(Group,`1`='Unidentified', `2`='Immune',
`3`='Endothelial', `4`='Mesenchymal-like',
`5` = 'Tumor',
`6` = 'Keratin-positive tumor'))
cell_markers <- cell_markers%>%
mutate(cell_type = ifelse(Group == 'Immune', cell_type<- immuneGroup,cell_type <- Group))%>%
dplyr::select(-(tumorYN:immuneGroup))
cell_markers <- cell_markers%>%
dplyr::rename(patient_id = SampleID)%>%
dplyr::rename(cell_id = cellLabelInImage)
#colnames(cell_markers)
tmens_cells <- read.csv("../data_BB/archetypes_sites_centered_cells_gaussian.csv")
#rowSums(tmens_cells[,c("archetype1","archetype2","archetype3","archetype4")])
markersPerCell <- cell_markers%>%pivot_longer(cols = c("dsDNA","Background","Vimentin","SMA","B7H3","FoxP3","Lag3","CD4","CD16","CD56","OX40","PD1","CD31","PD.L1","EGFR","Ki67","CD209","CD11c","CD138","CD163","CD68","CSF.1R","CD8","CD3","IDO","Keratin17","CD63","CD45RO","CD20","p53","Beta.catenin","HLA.DR","CD11b","CD45","H3K9ac","Pan.Keratin","H3K27me3","phospho.S6","MPO","Keratin6","HLA_Class_1"),names_to = "marker", values_to= "value")
markersPerCell.sd <- markersPerCell%>% group_by(cell_type, marker)%>%summarise(sd = sd(value))
#MarkersCells.var <- left_join(selectedMarkers, markersPerCell,by= c("cell_type","marker"))
ggplot(data = markersPerCell.sd ,aes(x=cell_type,y = sd,group = marker))+
geom_point()+#scale_y_log10()+geom_boxplot()+
geom_hline(yintercept=2, linetype="dashed", color = "red")+
theme(axis.text.x = element_text(angle = 90, hjust = 0.2, vjust = 0.2))+
labs(x = "")
selectedMarkers <- markersPerCell.sd%>%filter(sd >=2)#%>%ungroup()%>%dplyr::select(marker)%>%unique()
#saveRDS(selectedMarkers,"./selected_markers_cells.rds")
#MarkersCells.var <- left_join(selectedMarkers, markersPerCell,by= c("cell_type","marker"))
### Markers expr for all cell types from all sites
MarkersCellsTMENS <- left_join(markersPerCell%>%rename(site_id=cell_id),tmens_cells, by=c("patient_id","site_id"))%>%filter(!(is.na(arch1)| is.na(arch2)| is.na(arch3) | is.na(arch4)))%>%
mutate(a1a2 = arch1*arch2)%>%
mutate(a1a3 = arch1*arch3)%>%
mutate(a1a4 = arch1*arch4)%>%
mutate(a2a3 = arch2*arch3)%>%
mutate(a2a4 = arch2*arch4)%>%
mutate(a3a4 = arch3*arch4)%>%
mutate(a1a2a3 = arch1*arch2*arch3)%>%
mutate(a1a2a4 = arch1*arch2*arch4)%>%
mutate(a1a3a4 = arch1*arch3*arch4)%>%
mutate(a2a3a4 = arch2*arch3*arch4)%>%
mutate(a1a2a3a4 = arch1*arch2*arch3*arch4)
#saveRDS(MarkersCellsTMENS,"./MarkerSCellsTMENs.rds")
#### ONly highly variable markers expr from selected cell types across patients/sites
MarkersCellsTMENS.selected <- left_join(selectedMarkers,MarkersCellsTMENS,by=c("cell_type","marker"))#left_join(MarkersCells.var%>%rename(site_id=cell_id),tmens_cells, by=c("patient_id","site_id"))
#saveRDS(MarkersCellsTMENS,"./markers_cells_tmens.rds")
MarkersCellsTMENS.selected.cd4 <- MarkersCellsTMENS.selected%>%
filter(cell_type == "CD4-T")%>%
pivot_wider(id_cols = c("site_id","patient_id","arch1","arch2","arch3","arch4"),
names_from = "marker",
values_from = "value")
MarkersTMENs.kerPos <-MarkersCellsTMENS%>%
filter(cell_type=="Keratin-positive tumor")%>%
pivot_wider(id_cols=c("site_id","patient_id","arch1","arch2","arch3","arch4"),
names_from = "marker",
values_from = "value")
# TernaryPlot(atip = expression(arch1),
#              btip = expression(arch2),
#              ctip = expression(arch3))
# TernaryPoints(MarkersTMENs.kerPos[,c("arch1","arch2","arch3")],pch=19)
library(ggplot2)
library(ggtern)
MarkersTMENs.kerPos<-MarkersTMENs.kerPos%>%dplyr::rename(TLS=arch1)%>%
dplyr::rename(inflamm = arch2)%>%dplyr::rename(fibrotic=arch4)%>%
dplyr::rename(cancer=arch3)
options(ggplot2.continuous.colour="viridis")
#pdf("./TernaryPlot_KerPos_HLA1.pdf",width=5,height=4)
# ggtern(data=MarkersTMENs.kerPos, aes(x = cancer,y = inflamm, z = fibrotic,color = HLA_Class_1)) +
#   geom_point() +
#   labs(title="Local environment in Keratin-positive cancer cells") +
#   theme_custom(
#   base_size = 9,
#   base_family = "",
#   tern.plot.background = NULL,
#   tern.panel.background = NULL,
#   col.T = "red",
#   col.L = "magenta",
#   col.R = "steelblue",
#   col.grid.minor = "white"
# )
#dev.off()
library(ggpubr)
MarkersCellsTMENS1 <- MarkersCellsTMENS%>%dplyr::rename(TLS=arch1)%>%
dplyr::rename(inflamm = arch2)%>%dplyr::rename(fibrotic=arch4)%>%
dplyr::rename(cancer=arch3)
####POSITIVE CONTROLS
## HLA CLASS I IN KERATIN-POSITIVE TUMORS
ggplot(data=MarkersTMENs.kerPos,aes(x=inflamm*cancer,y=HLA_Class_1))+
geom_point(alpha=.01)+
geom_density_2d()+
#scale_x_continuous(trans="log")+
stat_cor(method="spearman",cor.coef.name="rho",label.x=0.2)+
ggtitle("HLA class I in Ker+ cells and inflamm-cancer interface")
## BETA CATENIN IN CD8 T CELLS
ggplot(data=MarkersCellsTMENS1%>%filter(cell_type=="CD8-T"& marker=="Beta.catenin"),aes(x=cancer*fibrotic,y=value))+
geom_point(alpha=.01)+
geom_density_2d()+
#scale_x_continuous(trans="log")+
stat_cor(method="spearman",cor.coef.name="rho",label.x=0.18)+
ggtitle("Beta catenin in CD8T cellls & cancer-fibr interface")
#### NEGATIVE CONTROLS
## dsDNA in KERATIN POSITIVE TUMORS VS CANCER
ggplot(data=MarkersTMENs.kerPos,aes(x=cancer,y=dsDNA))+
geom_point(alpha=.01)+
geom_density_2d()+
#scale_y_continuous(trans="log")+ #scale_x_continuous(trans="log")+
stat_cor(method="spearman",cor.coef.name="rho",label.x=0.70)+
ggtitle("dsDNA in Ker+ cells & cancer niche")
## dsDNA in KERATIN POSITIVE TUMORS VS INFLAMM Neutrophils;CD45RO in TLS
ggplot(data=MarkersCellsTMENS1%>%filter(cell_type=="Neutrophils"& marker=="CD45RO"),aes(x=TLS,y=value))+
geom_point(alpha=.01)+
geom_density_2d()+
#scale_y_continuous(trans="log")+ #scale_x_continuous(trans="log")+
stat_cor(method="spearman",cor.coef.name="rho",label.x=0.70)+
ggtitle("CD45RO in Neutrophils & TLS")
### RANDOM CONTROLS (8 ct-markers VS TMENs)
TMENs <- c("TLS","inflamm","cancer","fibrotic")
set.seed(12)
rand.ct <- sample(CELLTYPES, 8)
rand.markers <- sample(MARKERS,8)
rand.tmens <- sample(TMENs,8,replace=TRUE)
MarkersCellsTMENS2 <- MarkersCellsTMENS1%>%pivot_longer(cols=c("cancer","TLS","inflamm","fibrotic"),names_to="tmen",values_to = "tmen_prop")
randCMs <- tibble(cell_type=rand.ct,marker=rand.markers,tmen=rand.tmens)
#merge(MarkersCellsTMENS2,randCMs, by=c("cell_type","marker","tmen"))
randsToPlot <- right_join(MarkersCellsTMENS2%>%dplyr::select(c(cell_type, marker, tmen, value, tmen_prop)),randCMs, by=c("cell_type","marker","tmen"))%>%mutate(ctMarker = paste0(cell_type,";",marker, " VS ",tmen))#%>%group_by(cell_type, marker,tmen)%>%summarise(count=n())
ggplot(data=randsToPlot,aes(x=tmen_prop,y=value))+
facet_wrap(~ctMarker,nrow=2,ncol=4)+
geom_point(alpha=.01)+
geom_density_2d()+
stat_cor(method="spearman",cor.coef.name="rho",label.x=0.30)
#MarkersCellsTMENS2%>%group_by(cell_type, marker, tmen)%>%filter(cell_type==randCMs$cell_type & marker ==randCMs$marker & tmen ==randCMs$tmen)
NB_TMENs <- 4
## PARAMETERS : k ct and gamma vector
## pars = (gamma_1,...,gamma_n,k)
## Minimizing function to fit dirichlet distribution
## x_cm(alpha): intensity of marker m in cell type c
## x_cap: fitted intensity
## alpha: vector of position in TMENs simplex
func <-function(data, pars){
# f1<-1
# for (i in range(NB_TMENs)){
#   f1 <-with(x_cm, f1 * (x_cm[i]^pars[i])) #f1 * (x_cm[i]^pars[i])#(alpha[i]^pars[i])
# }
# B <- with(x_cm,beta(list(arch1,arch2,arch3,arch4)))#(as.vector(x_cm[,c("arch1","arch2","arch3","arch4")]))#(alpha)
# x_cap <- (1/B)*pars[NB_TMENs+1]*with(x_cm, prod(c(arch1,arch2,arch3,arch4)^pars[1:NB_TMENs]))#f1
#beta(arch1,arch2,arch3,arch4))*pars[NB_TMENs+1]  (1/(prod(sapply(pars[1:NB_TMENs],function(x) gamma(x)))/gamma(sum(pars[1:NB_TMENs]))))*
with(data, sum((value - (pars[NB_TMENs+1]* apply(cbind(arch1,arch2,arch3,arch4),1,function (x) prod(diag(outer(x,pars[1:NB_TMENs],FUN="^"))))))^2))#with(data, sum((value - (pars[NB_TMENs+1]* prod(diag(outer(c(arch1,arch2,arch3,arch4),pars[1:NB_TMENs],FUN="^")))))^2)) #(as.vector(x_cm[,"value"]) - x_cap)^2
}
#apply(data[,c(arch1,arch2,arch3,arch4)],1,function (x) prod(diag(outer(x,c(0.5,1,-2,5),FUN="^"))))
## Get df with alpha values of TMENs and marker intensity value of cells of a given cell type
get_tmens_coord_marker <- function(MarkersCellsTMENS,cellType, ma){
MarkersCellsTMENS.ct <- MarkersCellsTMENS%>%
filter(cell_type == cellType & marker == ma)#%>%
#pivot_wider(id_cols = c("site_id","patient_id","arch1","arch2","arch3","arch4"),
#            names_from = "marker",
#            values_from = "value")
# machine precision is 2.220446e-16: least positive number x such as 1+ x!  = 1
# 0 is < machine precision
# each time we find a nb that is null, assign this value to avoid Nan, etc...
# MarkersCellsTMENS.ct <- MarkersCellsTMENS.ct  %>%mutate(arch1=ifelse(arch1<.Machine$double.eps,eps,arch1))%>%
#   mutate(arch2=ifelse(arch2 <.Machine$double.eps,eps,arch2))%>%
#   mutate(arch3=ifelse(arch3 <.Machine$double.eps,eps,arch3))%>%
#   mutate(arch4=ifelse(arch4 <.Machine$double.eps,eps,arch4))
#return(MarkersCellsTMENS.ct%>%dplyr::select(-c(patient_id,site_id,cell_type_site,cell_type,marker)))#c(arch1,arch2,arch3,arch4,value)
return(MarkersCellsTMENS.ct)
}
stateMarkers <- read.csv("./proteins_by_frame.csv")
FuncMarkers <- stateMarkers%>%filter(Purpose =="Functional")%>%pull(Biomarker)
FuncMarkers <- str_replace_all(FuncMarkers,c("HLA-DR"="HLA.DR","PD-L1" = "PD.L1","phospho-S6" = "phospho.S6","Beta catenin" = "Beta.catenin"))
corMatrix.pval <-
matrix(nrow = length(CELLTYPES)*length(FuncMarkers), ncol=4+6+4+1,
dimnames =
list(c(),
c('a1','a2','a3',"a4","a1a2","a1a3","a1a4","a2a3","a2a4",
"a3a4","a1a2a3","a1a2a4","a1a3a4","a2a3a4","a1a2a3a4"))
)
corMatrix <- corMatrix.pval
cmNames <- c()
id = 1
ct = CELLTYPES[1]
for(ct in CELLTYPES){
#cat(sprintf("%s\n", ct))
for(m in FuncMarkers){
data <- get_tmens_coord_marker(MarkersCellsTMENS,ct,m)
X <- data %>%dplyr::select(c(value))
A1 <- data %>%dplyr::select(c(arch1,arch2,arch3,arch4))
A2 <- data %>%dplyr::select(c(a1a2,a1a3,a1a4,a2a3,a2a4,a3a4))
A3 <- data %>%dplyr::select(c(a1a2a3,a1a2a4,a1a3a4,a2a3a4))
#print(A1)
cmNames[id] <- paste0(ct,";",m)
corMatrix.pval[id,'a1'] <- cor.test(X%>%pull(value),A1%>%pull(arch1),method="spearman",exact=FALSE)$p.value
corMatrix.pval[id,'a2'] <- cor.test(X%>%pull(value),A1%>%pull(arch2),method="spearman",exact=FALSE)$p.value
corMatrix.pval[id,'a3'] <- cor.test(X%>%pull(value),A1%>%pull(arch3),method="spearman",exact=FALSE)$p.value
corMatrix.pval[id,"a4"] <- cor.test(X%>%pull(value),A1%>%pull(arch4),method="spearman",exact=FALSE)$p.value
corMatrix[id,'a1'] <- cor.test(X%>%pull(value),A1%>%pull(arch1),method="spearman",exact=FALSE)$estimate
corMatrix[id,'a2'] <- cor.test(X%>%pull(value),A1%>%pull(arch2),method="spearman",exact=FALSE)$estimate
corMatrix[id,'a3'] <- cor.test(X%>%pull(value),A1%>%pull(arch3),method="spearman",exact=FALSE)$estimate
corMatrix[id,"a4"] <- cor.test(X%>%pull(value),A1%>%pull(arch4),method="spearman",exact=FALSE)$estimate
#### A2 correlations ####
corMatrix.pval[id,"a1a2"] <- cor.test(X%>%pull(value),A2%>%pull(a1a2),method="spearman",exact=FALSE)$p.value
corMatrix.pval[id,"a1a3"] <- cor.test(X%>%pull(value),A2%>%pull(a1a3),method="spearman",exact=FALSE)$p.value
corMatrix.pval[id,"a1a4"] <- cor.test(X%>%pull(value),A2%>%pull(a1a4),method="spearman",exact=FALSE)$p.value
corMatrix.pval[id,"a2a3"] <- cor.test(X%>%pull(value),A2%>%pull(a2a3),method="spearman",exact=FALSE)$p.value
corMatrix.pval[id,"a2a4"] <- cor.test(X%>%pull(value),A2%>%pull(a2a4),method="spearman",exact=FALSE)$p.value
corMatrix.pval[id,"a3a4"] <- cor.test(X%>%pull(value),A2%>%pull(a3a4),method="spearman",exact=FALSE)$p.value
corMatrix[id,"a1a2"] <- cor.test(X%>%pull(value),A2%>%pull(a1a2),method="spearman",exact=FALSE)$estimate
corMatrix[id,"a1a3"] <- cor.test(X%>%pull(value),A2%>%pull(a1a3),method="spearman",exact=FALSE)$estimate
corMatrix[id,"a1a4"] <- cor.test(X%>%pull(value),A2%>%pull(a1a4),method="spearman",exact=FALSE)$estimate
corMatrix[id,"a2a3"] <- cor.test(X%>%pull(value),A2%>%pull(a2a3),method="spearman",exact=FALSE)$estimate
corMatrix[id,"a2a4"] <- cor.test(X%>%pull(value),A2%>%pull(a2a4),method="spearman",exact=FALSE)$estimate
corMatrix[id,"a3a4"] <- cor.test(X%>%pull(value),A2%>%pull(a3a4),method="spearman",exact=FALSE)$estimate
#### A3 correlations ####
corMatrix.pval[id,"a1a2a3"] <- cor.test(X%>%pull(value),A3%>%pull(a1a2a3),method="spearman",exact=FALSE)$p.value
corMatrix.pval[id,"a1a2a4"] <- cor.test(X%>%pull(value),A3%>%pull(a1a2a4),method="spearman",exact=FALSE)$p.value
corMatrix.pval[id,"a1a3a4"] <- cor.test(X%>%pull(value),A3%>%pull(a1a3a4),method="spearman",exact=FALSE)$p.value
corMatrix.pval[id,"a2a3a4"] <- cor.test(X%>%pull(value),A3%>%pull(a2a3a4),method="spearman",exact=FALSE)$p.value
corMatrix[id,"a1a2a3"] <- cor.test(X%>%pull(value),A3%>%pull(a1a2a3),method="spearman",exact=FALSE)$estimate
corMatrix[id,"a1a2a4"] <- cor.test(X%>%pull(value),A3%>%pull(a1a2a4),method="spearman",exact=FALSE)$estimate
corMatrix[id,"a1a3a4"] <- cor.test(X%>%pull(value),A3%>%pull(a1a3a4),method="spearman",exact=FALSE)$estimate
corMatrix[id,"a2a3a4"] <- cor.test(X%>%pull(value),A3%>%pull(a2a3a4),method="spearman",exact=FALSE)$estimate
corMatrix[id,"a1a2a3a4"] <-
cor.test(X%>%pull(value),data%>%pull(a1a2a3a4),method="spearman",exact=FALSE)$estimate
corMatrix.pval[id,"a1a2a3a4"] <-
cor.test(X%>%pull(value),data%>%pull(a1a2a3a4),method="spearman",exact=FALSE)$p.value
id = id+1
}
}
rownames(corMatrix) <- cmNames
rownames(corMatrix.pval) <- cmNames
corCMtmens.pval <-corMatrix.pval%>%as_tibble(rownames=NA)%>%
rownames_to_column(var="names")%>%
#separate(names,into=c("cell_type","marker"),sep=";")%>%
drop_na()
corCMtmens <-corMatrix%>%as_tibble(rownames=NA)%>%
rownames_to_column(var="names")%>%
#separate(names,into=c("cell_type","marker"),sep=";")%>%
drop_na()
### CORRECTIONS P VALUE FDR
library(fdrtool)
dim(corCMtmens.pval)
corCMtmens.pval.mat = corCMtmens.pval %>% column_to_rownames(var='names')
fdrOut =
fdrtool(corCMtmens.pval.mat %>% as.matrix %>% as.numeric(),
statistic = "pvalue")
corCMtmens.qval =
fdrOut$lfdr %>%
matrix(nrow=nrow(corCMtmens.pval.mat), ncol=ncol(corCMtmens.pval.mat),
dimnames = list(rownames(corCMtmens.pval.mat), colnames(corCMtmens.pval.mat)))
dim(corCMtmens.qval)
dim(corCMtmens.pval.mat)
sample rsessioon > rsession-sample.txt
sample rsession > rsession-sample.txt
knitr::opts_chunk$set(echo = TRUE)
gc()
rm(list=ls())
gc()
gc()
rm(list=ls())
setwd(dir="/scratch/anissa.el/ImmuneStates/schurch_analysis")
library(tidyverse)
library(ggplot2)
library(factoextra)
library(MASS)
library(reticulate)
library(survival)
source("/scratch/anissa.el/ImmuneStates/wagner_analysis/scripts/R/Wagner_Keren_functions.r")
DataKeren <- read.csv("../wagner_analysis/data/archetypes_building_blocks_17cells_space_gaussian.csv")%>%column_to_rownames(var="archetype")
NeighborhKeren <- read.csv("./outputs/neighborhoods_mean_cell_abundance_gauss25.csv")
tmens <- t(as.matrix(DataKeren))
CNs <- as.matrix(NeighborhKeren)
outLR <- linear_regression(Y=CNs, B=tmens)
NB_CLUSTS <- 10
View(NeighborhKeren)
View(outLR)
View(DataKeren)
sitesAbund <- read.csv("./outputs/sites_neighborhoods_cell_abundance_gauss25.csv")
View(sitesAbund)
totalVariance <- sitesAbund%>%dplyr::select(-c(neighborhood_id))%>%pivot_longer(cols = c('CD8-T', 'Other immune', 'DC / Mono', 'CD3-T', 'B', 'NK', 'Keratin-positive tumor', 'Tumor','CD4-T', 'Mesenchymal-like', 'Macrophages', 'Endothelial', 'Tregs', 'Unidentified', 'DC', 'Mono / Neu','Neutrophils'),names_to="cell_type",values_to = "density")%>%group_by(cell_type)%>%summarise(var=var(density))%>%pull(var)
colnames(sitesAbund)
totalVariance <- sitesAbund%>%dplyr::select(-c(neighborhood_id))%>%pivot_longer(cols = c('CD8.T', 'Other immune', 'DC...Mono', 'CD3.T', 'B', 'NK', 'Keratin.positive.tumor', 'Tumor','CD4.T', 'Mesenchymal.like', 'Macrophages', 'Endothelial', 'Tregs', 'Unidentified', 'DC', 'Mono...Neu','Neutrophils'),names_to="cell_type",values_to = "density")%>%group_by(cell_type)%>%summarise(var=var(density))%>%pull(var)
totalVariance <- sitesAbund%>%dplyr::select(-c(neighborhood_id))%>%pivot_longer(cols = c('CD8.T', 'Other.immune', 'DC...Mono', 'CD3.T', 'B', 'NK', 'Keratin.positive.tumor', 'Tumor','CD4.T', 'Mesenchymal.like', 'Macrophages', 'Endothelial', 'Tregs', 'Unidentified', 'DC', 'Mono...Neu','Neutrophils'),names_to="cell_type",values_to = "density")%>%group_by(cell_type)%>%summarise(var=var(density))%>%pull(var)
totalVariance <- sitesAbund%>%dplyr::select(-c(neighborhood_id))%>%pivot_longer(cols = c('CD8.T', 'Other.immune', 'DC...Mono', 'CD3.T', 'B', 'NK', 'Keratin.positive.tumor', 'Tumor','CD4.T', 'Mesenchymal.like', 'Macrophages', 'Endothelial', 'Tregs', 'Unidentified', 'DC', 'Mono...Neu','Neutrophils'),names_to="cell_type",values_to = "density")%>%group_by(cell_type)%>%summarise(var=var(density))%>%pull(var)%>%sum(.)
totalVariance <- sitesAbund%>%dplyr::select(-c(neighborhood_id))%>%pivot_longer(cols = c('CD8.T', 'Other.immune', 'DC...Mono', 'CD3.T', 'B', 'NK', 'Keratin.positive.tumor', 'Tumor','CD4.T', 'Mesenchymal.like', 'Macrophages', 'Endothelial', 'Tregs', 'Unidentified', 'DC', 'Mono...Neu','Neutrophils'),names_to="cell_type",values_to = "density")%>%group_by(cell_type)%>%summarise(var=var(density))%>%pull(var)%>%sum(.)
totalVariance <- sitesAbund%>%dplyr::select(-c(neighborhood_id))%>%pivot_longer(cols = c('CD8.T', 'Other.immune', 'DC...Mono', 'CD3.T', 'B', 'NK', 'Keratin.positive.tumor', 'Tumor','CD4.T', 'Mesenchymal.like', 'Macrophages', 'Endothelial', 'Tregs', 'Unidentified', 'DC', 'Mono...Neu','Neutrophils'),names_to="cell_type",values_to = "density")%>%group_by(cell_type)%>%summarise(var=var(density))%>%pull(var)#%>%sum(.)
meanClustAbund <- read.csv("./outputs/neighborhoods_mean_cell_abundance_gauss25.csv")
View(meanClustAbund)
meanClustAbund <- read.csv("./outputs/neighborhoods_mean_cell_abundance_gauss25.csv")%>%mutate(neighborhood_id=seq(1,10,1))
View(meanClustAbund)
meanClustAbund <- read.csv("./outputs/neighborhoods_mean_cell_abundance_gauss25.csv")#%>%mutate(neighborhood_id=seq(1,10,1))
mapply(FUN = function(x,y) sum((x-y)^2),sitesAbund%>%dplyr::select(-c(neighborhood_id)),meanClustAbund)
meanClustAbund <- read.csv("./outputs/neighborhoods_mean_cell_abundance_gauss25.csv")%>%mutate(neighborhood_id=seq(1,10,1))
apply(sitesAbund,MARGIN=1,FUN = function(x){if(x$neighborhood_id==meanClustAbund$neighborhood_id){sum(x%>%dplyr::select(-c(neighborhood_id))-meanClustAbund%>%dplyr::select(-c(neighborhood_id))^2)}})
sapply(sitesAbund,MARGIN=1,FUN = function(x){if(x$neighborhood_id==meanClustAbund$neighborhood_id){sum(x%>%dplyr::select(-c(neighborhood_id))-meanClustAbund%>%dplyr::select(-c(neighborhood_id))^2)}})
sapply(sitesAbund,FUN = function(x){if(x$neighborhood_id==meanClustAbund$neighborhood_id){sum(x%>%dplyr::select(-c(neighborhood_id))-meanClustAbund%>%dplyr::select(-c(neighborhood_id))^2)}})
mergedSitesCl <- merge(sitesAbund,meanClustAbund,"neighborhood_id")
mergedSitesCl$residual <- apply(mergedSitesCl%>%dplyr::select(-c(neighborhood_id), 1, function(x)
sum((x[grep(".x",names(x))])- x[grep(".y",names(x))])^2))
mergedSitesCl$residual <- apply(mergedSitesCl%>%dplyr::select(-c(neighborhood_id), 1, FUN=function(x)
sum((x[grep(".x",names(x))])- x[grep(".y",names(x))])^2))
mergedSitesCl$residual <- apply(mergedSitesCl%>%dplyr::select(-c(neighborhood_id),
MARGIN=1,
FUN=function(x) sum((x[grep(".x",names(x))]- x[grep(".y",names(x))])^2)))
mergedSitesCl$residual <- apply(mergedSitesCl%>%dplyr::select(-c(neighborhood_id)),
MARGIN=1,
FUN=function(x) sum((x[grep(".x",names(x))]- x[grep(".y",names(x))])^2))
mergedSitesCl$residual <- apply(mergedSitesCl%>%dplyr::select(-c(neighborhood_id)),
MARGIN=1,
FUN=function(x) sum((x[grep(".x$",names(x))]- x[grep(".y$",names(x))])^2))
View(mergedSitesCl)
mergedSitesCl%>%group_by(neighborhood_id)%>%summarise(residual=residual)
mergedSitesCl <- merge(sitesAbund,meanClustAbund,"neighborhood_id")
apply(mergedSitesCl%>%dplyr::select(-c(neighborhood_id)),
MARGIN=1,
FUN=function(x) sum((x[grep(".x$",names(x))]- x[grep(".y$",names(x))])^2))
sum(apply(mergedSitesCl%>%dplyr::select(-c(neighborhood_id)),
MARGIN=1,
FUN=function(x) sum((x[grep(".x$",names(x))]- x[grep(".y$",names(x))])^2)))
sum(totalVariance)
reticulate::repl_python()
